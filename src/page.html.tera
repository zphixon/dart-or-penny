<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf8" />
    <link rel="icon" type="image/png" href="{{ page_root }}/.dop/pwa/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="{{ page_root }}/.dop/pwa/favicon.svg" />
    <link rel="shortcut icon" href="{{ page_root }}/.dop/pwa/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="{{ page_root }}/.dop/pwa/apple-touch-icon.png" />
    <meta name="apple-mobile-web-app-title" content="DartOrPenny" />
    <link rel="manifest" href="{{ page_root }}/.dop/pwa/site.webmanifest" crossorigin="use-credentials" />
    <title>{{ tab_title }}</title>
    <style>
      :root {
        --bg-color: rgb(250, 255, 242);
        --border-color: rgb(30, 48, 21);
        --text-color: rgb(34, 55, 14);
        --link-color: rgb(30, 103, 8);
        --header-color: rgb(232, 249, 208);
      }

      body {
        color: var(--text-color);
      }
      a, a:visited {
        color: var(--link-color);
      }

      #searchboxdiv {
        display: flex;
        column-gap: 0.5em;
        padding-bottom: 1em;
      }
      #searchbox {
        flex-grow: 1;
      }
      #caseSensitiveLabel {
        user-select: none;
      }

      .filetable {
        display: grid;
        grid-template-columns: 1fr;
      }

      .row {
        display: grid;
        grid-template-columns: 3em 3fr repeat(3, minmax(12em, 1fr));
        border-bottom: 1px solid var(--border-color);
        border-right: 1px solid var(--border-color);
      }
      .row > div:not(#topleft) {
        padding: 0.25em;
        border-left: 1px solid var(--border-color);
      }
      .row > .filename {
        word-break: break-all;
      }

      .row.header {
        user-select: none;
        border-bottom: none;
      }
      .header > :not(:first-child) {
        background-color: var(--header-color);
        border-top: 1px solid var(--border-color);
        border-bottom: 1px solid var(--border-color);
      }
      #topleft {
        border-bottom: 1px solid var(--border-color);
      }
      .header.mostRecentFirst::after, .header.asc::after {
        content: " ‚ñæ";
      }
      .header.mostRecentLast::after, .header.desc::after {
        content: " ‚ñ¥";
      }

      .icon {
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .icon > img {
        max-height: 3em;
        max-width: 3em;
      }

      .everywheresearch {
        padding: 0.3em;
      }

      #numfiles {
        margin-left: 0.3em;
        margin-top: 0.3em;
      }

      @media (max-width: 900px) {
        .accessed {
          display: none;
        }
        .row {
          grid-template-columns: 3em 3fr repeat(2, minmax(12em, 1fr));
        }
      }
      @media (max-width: 650px) {
        .created {
          display: none;
        }
        .row {
          grid-template-columns: 3em 3fr minmax(10em, 1fr);
        }
      }
      @media (max-width: 530px) {
        #searchboxdiv {
          flex-direction: column;
          row-gap: 0.5em;
        }
        #clearSearch, #searchbox, #searchEverywhere {
          padding: 1em;
        }
        #caseSensitiveLabel {
          display: grid;
          justify-items: end;
          grid-template-columns: 1fr auto;
        }
      }
    </style>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, minimal-ui">
  </head>
  <body>
    <h1>
      {% for part in page_title_parts %}
        <a href="{{ part.href }}">{{ part.path }}</a>
        {% if not loop.last %}
          {{ path_sep }}
        {% endif %}
      {% endfor %}
    </h1>

    <div id="searchboxdiv">
      <button id="clearSearch">clear search</button>
      <input id="searchbox" type="text" placeholder="üîé search"/>
      <label id="caseSensitiveLabel" for="caseSensitive">
        case sensitive?
        <input id="caseSensitive" type="checkbox"/>
      </label>
      <button id="searchEverywhere">search everywhere</button>
    </div>

    <div class="filetable">
      <div class="header row">
        <div class="header" id="topleft"></div>
        <div class="header filename">filename</div>
        <div class="header created">created</div>
        <div class="header modified">modified</div>
        <div class="header accessed">accessed</div>
      </div>

      {%- set_global last_dir = 0 -%}
      {% for dir in dirs %}
        {%- set_global last_dir = loop.index -%}
        <div class="dir row" data-key="{{ loop.index }}">
          <div class="dir icon">üìÅ</div>
          <div class="dir filename">
            <a href="{{ dir.filename }}">{{ dir.basename }}</a>
          </div>
          <div class="dir created">{{ dir.created }}</div>
          <div class="dir modified">{{ dir.modified }}</div>
          <div class="dir accessed">{{ dir.accessed }}</div>
        </div>
      {% endfor %}

      {% for file in files %}
        <div class="file row" data-key="{{ last_dir + loop.index }}">
          <div class="file icon">
            {% if file.thumbnail_data %}
              <img src="data:image/webp;base64,{{ file.thumbnail_data }}" />
            {% else %}
              üìÉ
            {% endif %}
          </div>
          <div class="file filename">
            <a href="{{ file.filename }}" target="_blank" rel="noopener noreferrer">{{ file.basename }}</a>
          </div>
          <div class="file created">{{ file.created }}</div>
          <div class="file modified">{{ file.modified }}</div>
          <div class="file accessed">{{ file.accessed }}</div>
        </div>
      {% endfor %}
    </div>

    <div id="numfiles">
      {% set here = dirs | concat(with=files) | length %}
      {% set in_subdirs = num_files - here + 1 %} {# why +1?? #}
      <span class="number">{{ here }}</span>
      {% if dirs | length != 0 -%}
        / <span class="number">{{ in_subdirs }}</span>
      {%- endif %}
    </div>

    <script type="text/javascript">
      let numfiles = document.getElementById("numfiles");
      for (let number of document.querySelectorAll(".number")) {
        number.innerText = new Intl.NumberFormat().format(parseInt(number.innerText));
      }

      let searchbox = document.getElementById("searchbox");
      let searchEverywhere = document.getElementById("searchEverywhere");
      let clearSearch = document.getElementById("clearSearch");
      let sensitive = document.getElementById("caseSensitive");

      function matches(haystack, needle) {
        if (needle == "") {
          return true;
        }
        let flags = "i";
        if (sensitive.checked) {
          flags = "";
        }
        return haystack.search(new RegExp(needle, flags)) >= 0;
        //return a.toLocaleLowerCase().indexOf(b.toLocaleLowerCase()) >= 0;
      }

      function filterList(filterQuery) {
        let anyMatched = false;
        let rows = document.querySelectorAll(".row:not(.header)");

        for (let row of rows) {
          let filename = row.querySelector(".filename");
          if (filename == null) {
            continue;
          }

          if (matches(filename.innerText, filterQuery)) {
            // setting display to empty string resets to previous display property
            row.style.display = "";
            numfiles.style.display = "";
            anyMatched = true;
          } else {
            row.style.display = "none";
            numfiles.style.display = "none";
          }
        }

        let topleft = document.getElementById("topleft");
        if (anyMatched) {
          topleft.style.borderBottom = "1px solid var(--border-color)";
        } else {
          topleft.style.borderBottom = "none";
        }
      }

      let pathSep = `{{ path_sep | json_encode() | replace(from='"', to='') }}`;
      function displayEverywhereSearchResults(filelist) {
        let fileTable = document.querySelector(".filetable");
        fileTable.style.display = 'none';

        for (result of document.querySelectorAll('.everywheresearch')) {
          result.remove();
        }
        for (file of filelist) {
          let div = document.createElement('div');
          div.classList.add('everywheresearch');

          let firsta = document.createElement("a");
          firsta.href = "{{ page_root }}";
          firsta.appendChild(document.createTextNode("{{ file_dir }}"));
          div.appendChild(firsta);

          let split = file.split(pathSep);
          var total = "{{ page_root }}";
          let i = -1;
          for (part of split) {
            i += 1;
            if (part === "") {
              continue;
            }

            total += "/" + part;
            let a = document.createElement('a');
            a.href = total;
            if (i + 1 == split.length) {
              a.target = "_blank";
              a.rel = "noopener noreferrer";
            }
            a.appendChild(document.createTextNode(part));
            div.appendChild(document.createTextNode(" " + pathSep + " "));
            div.appendChild(a);
          }

          fileTable.parentElement.appendChild(div);
        }
      }

      let searchingEverywhere = false;
      function doSearchEverywhere() {
        searchingEverywhere = true;
        fetch(
          "{{ page_root }}/.dop/search?regex="
          + encodeURIComponent(searchbox.value)
          + (sensitive.checked ? "&case_insensitive=false" : "")
        )
          .then(response => response.json())
          .then(filelist => {
            displayEverywhereSearchResults(filelist);
          });
      }

      function doClearSearch() {
        searchingEverywhere = false;
        for (let everySearch of document.querySelectorAll(".everywheresearch")) {
          everySearch.remove();
        }

        let fileTable = document.querySelector(".filetable");
        fileTable.style.display = "";

        searchbox.value = "";
        filterList("");
      }

      searchbox.oninput = event => filterList(event.target.value);
      searchbox.onkeydown = event => {
        if (event.key === 'Enter' && searchingEverywhere) {
          doSearchEverywhere();
        }

        if (event.key === 'Escape') {
          doClearSearch();
        }
      };

      sensitive.onchange = _ => filterList(searchbox.value);

      clearSearch.onclick = _ => {
        doClearSearch();
      };

      searchEverywhere.onclick = _ => doSearchEverywhere();

      let headerFilename = document.querySelector(".header.filename");
      let headerCreated = document.querySelector(".header.created");
      let headerModified = document.querySelector(".header.modified");

      // first row is header
      let [_header, ...files] = document.querySelectorAll(".row");
      let dateSort = "default";
      function setDateSort() {
        if (dateSort == "default") {
          dateSort = "mostRecentFirst";
        } else if (dateSort == "mostRecentFirst") {
          dateSort = "mostRecentLast";
        } else if (dateSort == "mostRecentLast") {
          dateSort = "default";
        }
      }
      function doDateSort(by) {
        files.sort((a, b) => {
          if (dateSort == "mostRecentFirst") {
            return new Date(a.children[by].innerText) < new Date(b.children[by].innerText);
          } else if (dateSort == "mostRecentLast") {
            return new Date(a.children[by].innerText) > new Date(b.children[by].innerText);
          } else {
            return parseInt(a.dataset["key"]) > parseInt(b.dataset["key"]);
          }
        }).forEach(file => {
          file.parentElement.appendChild(file);
        });
      }
      headerCreated.onclick = _ => {
        let sorted = document.querySelector("." + dateSort);
        if (sorted) sorted.classList.remove(dateSort);
        if (sorted != headerCreated) dateSort = "default";
        setDateSort();
        headerCreated.classList.add(dateSort);
        doDateSort(2);
      };
      headerModified.onclick = _ => {
        let sorted = document.querySelector("." + dateSort);
        if (sorted) sorted.classList.remove(dateSort);
        if (sorted != headerModified) dateSort = "default";
        setDateSort();
        headerModified.classList.add(dateSort);
        doDateSort(3);
      };

      let nameSort = "default";
      function setNameSort() {
        if (nameSort == "default") {
          nameSort = "asc";
        } else if (nameSort == "asc") {
          nameSort = "desc";
        } else if (nameSort == "desc") {
          nameSort = "default";
        }
      }
      function doNameSort() {
        files.sort((a, b) => {
          if (nameSort == "asc") {
            return a.children[1].innerText.toUpperCase().localeCompare(b.children[1].innerText.toUpperCase());
          } else if (nameSort == "desc") {
            return -a.children[1].innerText.toUpperCase().localeCompare(b.children[1].innerText.toUpperCase());
          } else {
            return parseInt(a.dataset["key"]) > parseInt(b.dataset["key"]);
          }
        }).forEach(file => {
          file.parentElement.appendChild(file);
        });
      }
      headerFilename.onclick = _ => {
        let dateSorted = document.querySelector("." + dateSort);
        if (dateSorted) dateSorted.classList.remove(dateSort);
        if (dateSort != "default") {
          dateSort = "default";
          doDateSort(2); // this fucking sucks without react but i do NOT want to set it up
        }

        headerFilename.classList.remove(nameSort);
        setNameSort();
        headerFilename.classList.add(nameSort);
        doNameSort();
      }
    </script>
  </body>
</html>